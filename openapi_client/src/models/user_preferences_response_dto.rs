/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.113.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserPreferencesResponseDto {
    #[serde(rename = "avatar")]
    pub avatar: Box<models::AvatarResponse>,
    #[serde(rename = "download")]
    pub download: Box<models::DownloadResponse>,
    #[serde(rename = "emailNotifications")]
    pub email_notifications: Box<models::EmailNotificationsResponse>,
    #[serde(rename = "folders")]
    pub folders: Box<models::FoldersResponse>,
    #[serde(rename = "memories")]
    pub memories: Box<models::MemoriesResponse>,
    #[serde(rename = "people")]
    pub people: Box<models::PeopleResponse>,
    #[serde(rename = "purchase")]
    pub purchase: Box<models::PurchaseResponse>,
    #[serde(rename = "ratings")]
    pub ratings: Box<models::RatingsResponse>,
    #[serde(rename = "tags")]
    pub tags: Box<models::TagsResponse>,
}

impl UserPreferencesResponseDto {
    pub fn new(avatar: models::AvatarResponse, download: models::DownloadResponse, email_notifications: models::EmailNotificationsResponse, folders: models::FoldersResponse, memories: models::MemoriesResponse, people: models::PeopleResponse, purchase: models::PurchaseResponse, ratings: models::RatingsResponse, tags: models::TagsResponse) -> UserPreferencesResponseDto {
        UserPreferencesResponseDto {
            avatar: Box::new(avatar),
            download: Box::new(download),
            email_notifications: Box::new(email_notifications),
            folders: Box::new(folders),
            memories: Box::new(memories),
            people: Box::new(people),
            purchase: Box::new(purchase),
            ratings: Box::new(ratings),
            tags: Box::new(tags),
        }
    }
}

